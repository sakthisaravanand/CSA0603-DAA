#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int value;
    struct Node* next;
} Node;

Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

void addEdge(Node** list, int index, int value) {
    Node* newNode = createNode(value);
    newNode->next = list[index];
    list[index] = newNode;
}

int findKey(int* keys, int size, int key) {
    for (int i = 0; i < size; ++i) {
        if (keys[i] == key) return i;
    }
    return -1;
}

void validArrangement(int pairs[][2], int size) {
    int mapSize = 0, startNode = pairs[0][0];
    int keys[100], inDegree[100] = {0}, outDegree[100] = {0};
    Node* adjacencyList[100] = {NULL};
    int path[100], pathSize = 0;

    for (int i = 0; i < size; ++i) {
        int start = pairs[i][0], end = pairs[i][1];
        int index = findKey(keys, mapSize, start);
        if (index == -1) keys[mapSize++] = start, index = mapSize - 1;
        addEdge(adjacencyList, index, end);
        outDegree[index]++;

        index = findKey(keys, mapSize, end);
        if (index == -1) keys[mapSize++] = end, index = mapSize - 1;
        inDegree[index]++;
    }

    for (int i = 0; i < mapSize; ++i) {
        if (outDegree[i] - inDegree[i] == 1) startNode = keys[i];
    }

    int stack[100], stackSize = 0;
    stack[stackSize++] = startNode;

    while (stackSize > 0) {
        int currentNode = stack[stackSize - 1], index = findKey(keys, mapSize, currentNode);
        if (adjacencyList[index]) {
            stack[stackSize++] = adjacencyList[index]->value;
            Node* temp = adjacencyList[index];
            adjacencyList[index] = adjacencyList[index]->next;
            free(temp);
        } else {
            path[pathSize++] = stack[--stackSize];
        }
    }

    for (int i = pathSize - 1; i > 0; --i) {
        printf("[%d, %d] ", path[i], path[i - 1]);
    }
    printf("\n");
}

int main() {
    int pairs[][2] = {{5, 1}, {4, 5}, {11, 9}, {9, 4}};
    validArrangement(pairs, sizeof(pairs) / sizeof(pairs[0]));
    return 0;
}
